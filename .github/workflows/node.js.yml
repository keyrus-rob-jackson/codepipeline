# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    strategy:
      matrix:
        node-version: ["21.6.1"]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
  
    - name: Update packages
      run: sudo apt-get update;  lsb_release -a
      
    - name: Install packages
      run: sudo apt-get install composer nginx redis php-fpm php-xml php-curl php-zip php-intl php-mbstring php-pgsql php-pear php-dev libhiredis-dev -y

    - name: Set PHP version as environment variable
      id: php_version
      run: |
        PHP_VERSION=$(php -r 'echo PHP_VERSION;')
        PHP_MAJOR_VERSION=$(echo "$PHP_VERSION" | cut -d '.' -f 1,2)
        echo "PHP_MAJOR_VERSION=$PHP_MAJOR_VERSION" >> $GITHUB_ENV

    - name: Display PHP version
      run: echo "PHP major version is $PHP_MAJOR_VERSION" ; php -i | grep "Loaded Configuration File"

    - name: Install php extension
      run: echo "extension=redis.so" | sudo tee -a /etc/php/$PHP_MAJOR_VERSION/cli/php.ini ; sudo systemctl restart php8.1-fpm.service

    # - name: check extension
    #   run: cat /etc/php/8.1/cli/php.ini

    # This segfaults for unknown reason, added "|| true" to force exit 0
    - name: Install phpredis vi pecl
      run: sudo pecl install redis || true

    - name: Run composer
      run: composer update; composer i
      
    - name: php key gen
      run: php artisan key:generate


    - name: Install npm modules
      run: npm i

    - name: NPM Build
      run: npm run build

    # - name: Archive artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: app.zip
    #     path: ./public

    - name: Zip file
      run: zip -r app.zip ./public

    - name: Dir listing
      run: ls -al ; ls -al ./public

    - name: Set AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    - name: Deploy to S3
      run: aws s3 cp app.zip s3://979706801997-pipeline-artifacts
    # - run: npm ci
    # - run: npm run build --if-present
    # - run: npm test
